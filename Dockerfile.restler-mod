################################################################################
# OpenAPI compile stage
################################################################################
# Dotnet required for compiling grammar, builds RESTler as well
FROM mcr.microsoft.com/dotnet/sdk:6.0-alpine as compile

# Install deps
RUN apk add --no-cache python3 py3-pip py3-requests py3-yaml
#     && pip3 install requests applicationinsights

WORKDIR /app

# Copy RESTler F# source
COPY ./restler/restler-mod/src/ ./src/
COPY ./restler/restler-mod/build-restler.py .

# Build RESTler
RUN python3 build-restler.py --dest_dir ./build/ \
    && python3 -m compileall -b ./build/engine/

# Compile the REST API definition
COPY ./resources/openapi.yml .
RUN ./build/restler/Restler compile --api_spec openapi.yml

# Generate SQLi payloads and create custom config
ARG DICT="sqliDict"
ARG CONF="customConfig"
COPY ./resources/initDB.sql .
COPY ./restler/restler-mod/sqli_dict_generator.py .
RUN sed 's/Compile\/defaultDict/'"$DICT"'/g' ./Compile/config.json > "$CONF".json \
    && python3 sqli_dict_generator.py \
        --dict-path "$DICT".json \
        --api_spec openapi.yml \
        --sql initDB.sql

# Recompile, TEMPORARY: backup engine settings
RUN cp ./Compile/engine_settings.json engine.bak
RUN ./build/restler/Restler compile $CONF.json
RUN cp engine.bak ./Compile/engine_settings.json
# grammar is stored in ./Compile

################################################################################
# Main stage
################################################################################
# Use Ubuntu Jammy as foundation
FROM ubuntu:22.04 as base
LABEL org.opencontainers.image.authors="dev@axelkoolhaas.com"

# Default arguments, THESE SHOULD BE OVERRIDDEN
ARG PREFIX="org.springframework.samples.petclinic.repository.jdbc."
ARG TARGET="JdbcVetRepositoryImpl:vulnFindById"
ARG VULN=vuln1
ARG IGNORE_HTTP_FEEDBACK=false

# Propegate build time args to runtime as well
ENV PREFIX=${PREFIX}
ENV TARGET=${TARGET}
ENV VULN=${VULN}
ENV IGNORE_HTTP_FEEDBACK=${IGNORE_HTTP_FEEDBACK}

# Install dependencies (OpenJDK17 and Python3.10)
# and fix java certificate issues by updating SSL certs
# and clear apt cache
RUN DEBIAN_FRONTEND=noninteractive apt-get update \
    && apt-get install -y \
        ca-certificates-java \
        curl \
        openjdk-17-jdk \
	    python3 \
        python3-pip \
    && update-ca-certificates --fresh \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd --create-home --shell /bin/bash app
WORKDIR /home/app/

# Copy grammar from compile stage
COPY --chown=app:app --from=compile /app/Compile/ ./Compile/

# Copy RESTler engine, vulnserver, api spec, and rusa
COPY --chown=app:app ./restler/restler-mod/restler/ ./restler/
COPY --chown=app:app ./resources/vulnserver.jar .
COPY --chown=app:app ./resources/openapi.yml .
COPY --chown=app:app ./resources/rusa-jar-with-dependencies.jar .

# Switch to non-root user
USER app

# Build distance tree and install dependecies RESTler
RUN java \
    -jar rusa-jar-with-dependencies.jar \
    --file vulnserver.jar\
    --target ${PREFIX}${TARGET} \
    && pip3 install --user --requirement ./restler/requirements.txt

# Entrypoint
COPY --chown=app:app --chmod=755 ./resources/entrypoint.sh .
COPY --chown=app:app --chmod=755 ./resources/entrypoint-restler.sh .
COPY --chown=app:app --chmod=755 ./resources/entrypoint-rusa.sh .
ENTRYPOINT ["./entrypoint.sh"]